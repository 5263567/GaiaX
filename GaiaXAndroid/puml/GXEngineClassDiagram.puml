@startuml


class GXExpression

interface GXIBindData

class GXViewTreeCreator {
}

class GXTemplateItem {
    val context: Context,
    val id: String,
    val biz: String,
    var version: String = "",
    var isForceLocal: Boolean = false
}

class GXTemplateData {
    val context: Context,
    val data: JSONObject,
    var eventListener: IGXEventListener? = null
    var trackListener: IGXTrackListener? = null
}

class GXMeasureSize{
    var width: Float?
    var height: Float?
}


class GXTemplateContext {
    var size: Size<Float?> = null
    var templateId: String = ""
    var templateBiz: String = ""
    var templateVersion: String = ""
    var isForceLocal: Boolean = false
    var templateInfo: GXTemplateInfo? = null
    var rootView: SoftReference<View>? = null
    var rootNode: GXNode? = null
    var data: JSONObject? = null
    var nestParentNodeInfo: GXTemplateNode? = null
    var animationListener: GaiaX.IAnimationListener? = null
}


class GXTemplatePath{
    val id: String,
    val biz: String,
    val version: Int,
    val layer: String,
    val css: String,
    val dataBind: String,
    val js: String
}


class GXDataImpl {
    fun getTemplateInfo(context: Context, templateBiz: String, templateId: String, forceLocalTemplate: Boolean = false): GXTemplateInfo?
}

class GXRenderImpl {
    fun createNode(templateContext: GXTemplateContext): GXNode
    fun bindNodeData(templateContext: GXTemplateContext)
    fun createView(templateContext: GXTemplateContext): View?
    fun bindViewData(templateContext: GXTemplateContext)
}

class GXTemplateInfoSource {
    fun getTemplateInfo(context: Context, templateBiz: String, templateId: String, forceLocalTemplate: Boolean = false): GXTemplateInfo?
}

class GXTemplatePathSource{
    fun getTemplatePath(templateBiz: String, templateId: String, templateVersion: String, forceTemplateLocal: Boolean): GXTemplatePath?
}

class GXEngine {
    val instance: GXEngine

    val provider:GXProviderImpl

    val render:GXRenderImpl

    val data:GXDataImpl

    fun init(context: Context)

    fun createView(params: GXTemplateItem, size: GXMeasureSize): View?

    fun bindData(targetView: View, params: GXTemplateInfo)
}

class GXAnimation{
    val type: GAnimationType,
    val trigger: Boolean,
    val state: GXExpression,
    val animator: IGAnimator
}

class GXEventBinding{
    val event: GXExpression
}

class GXTemplateInfo {
    val layer: GXLayer,
    val css: MutableMap<String, GXCss> = mutableMapOf(),
    val data: MutableMap<String, GXValueBinding>? = null,
    val event: MutableMap<String, GXEventBinding>? = null,
    val animation: MutableMap<String, GXAnimation>? = null,
    val config: MutableMap<String, GXExpression>? = null,
    val js: String? = null
    var children: MutableList<GXTemplateInfo>? = null
}



class GXLayer {
    val id: String,
    val css: String,
    val type: String,
    val subType: String? = null,
    val customNodeClass: String? = null,
    val scrollConfig: GXScrollConfig? = null,
    val gridConfig: GXGridConfig? = null,
    val layers: MutableList<GXLayer> = mutableListOf()
}

class GXCss {
    val style: GXStyle,
    val flexBox: GXFlexBox
}

class GXStyle {
    val fontSize: GXSize? = null,
    val fontFamily: Typeface? = null,
    val fontWeight: Typeface? = null,
    val fontLines: Int? = null,
    val fontColor: GXColor? = null,
    val fontLinearColor: GXLinearColor? = null,
    val fontTextOverflow: TextUtils.TruncateAt? = null,
    val fontTextAlign: Int? = null,
    val backgroundColor: GXColor? = null,
    val backgroundImage: GXLinearColor? = null,
    val opacity: Float? = null,
    val borderRadius: GXSize? = null,
    val overflow: Boolean? = null,
    val display: Int? = null,
    val hidden: Int? = null,
    val padding: Rect<GXSize>? = null,
    val borderWidth: GXSize? = null,
    val borderColor: GXColor? = null,
    val fontLineHeight: GXSize? = null,
    val fontTextDecoration: Int? = null
    val borderRadiusRadii: GXCornerRadii? = null,
    val mode: GXMode? = null,
    val boxShadow: GXBoxShadow? = null,
    val fitContent: Boolean? = null
}

class GXFlexBox {
    val display: Display? = null,
    val positionType: PositionType? = null,
    val direction: Direction? = null,
    val flexDirection: FlexDirection? = null,
    val flexWrap: FlexWrap? = null,
    val overflow: Overflow? = null,
    val alignItems: AlignItems? = null,
    val alignSelf: AlignSelf? = null,
    val alignContent: AlignContent? = null,
    val justifyContent: JustifyContent? = null,
    val position: Rect<Dimension>? = null,
    val margin: Rect<Dimension>? = null,
    val padding: Rect<Dimension>? = null,
    val border: Rect<Dimension>? = null,
    val flexGrow: Float? = null,
    val flexShrink: Float? = null,
    val flexBasis: Dimension? = null,
    val size: Size<Dimension>? = null,
    val minSize: Size<Dimension>? = null,
    val maxSize: Size<Dimension>? = null,
    val aspectRatio: Float? = null
}

class GXValueBinding{
    val value: GXExpression = GXExpression.Undefined,
    val accessibilityDesc: GXExpression = GXExpression.Undefined,
    val accessibilityEnable: GXExpression = GXExpression.Undefined,
    val placeholder: GXExpression = GXExpression.Undefined,
    val extend: MutableMap<String, GXExpression> = mutableMapOf()
}

abstract GXExpression {
    abstract fun desireData(rawJson: JSON? = null): Any?
}


class GXViewNodeTreeUpdater{
   
}

class GXNodeTreeCreator {
}

class GXTemplateNode {
    val layer: GXLayer
    val css: GXCss
    val dataBinding: GXDataBinding? = null
    val eventBinding: GXEventBinding? = null
    val animationBinding: GXAnimationBinding? = null
    val visualTemplateNode: GXTemplateNode? = null
}

class GXNodeUtils{
}

class GXViewFactory {
    {static} fun <T : View?> createView(context: Context, type: String, customViewClass: String? = null): T?
}

class GXViewLayoutParamsUtils {
    {static} fun createLayoutParams(data: GXNode, mergeX: Float = 0.0F, mergeY: Float = 0.0F): AbsoluteLayout.LayoutParams
    {static} fun updateLayoutParams(view: View, layout: Layout, mergeX: Float = 0.0F, mergeY: Float = 0.0F)
}

class GXNode {
    var id = ""
    var idPath = ""
    var isRoot: Boolean = false
    var isNestRoot: Boolean = false
    var viewRef: SoftReference<View>? = null
    var boxLayoutViewRef: SoftReference<View>? = null
    var templateNode: GXTemplateNode? = null
    var stretchNode: GXStretchNode? = null
    var children: MutableList<GXNode>? = null
}

interface GXITemplatePathSource

GXITemplatePathSource <|-- GXAssetsBinaryTemplatePathSource
GXITemplatePathSource <|-- GXAssetsTemplatePathSource
GXITemplatePathSource <|-- GXTemplatePathSource

GXDataImpl *-- GXTemplateInfoSource

GXDataImpl *-- GXTemplatePathSource

GXTemplatePathSource *-- GXAssetsTemplatePathSource

GXTemplatePathSource *-- GXAssetsBinaryTemplatePathSource

GXAssetsTemplatePathSource ..> GXTemplatePathAssets
GXAssetsBinaryTemplatePathSource ..> GXTemplatePathAssetsBinary

GXTemplateInfoSource --> GXTemplateInfo

GXTemplateInfo *-- GXLayer
GXTemplateInfo *-- GXCss
GXTemplateInfo *-- GXValueBinding
GXTemplateInfo *-- GXEventBinding
GXTemplateInfo *-- GXAnimation
GXTemplateInfo *-- GXExpression

GXLayer o-- GXScrollConfig
GXLayer o-- GXGridConfig

GXCss *-- GXFlexBox
GXCss *-- GXStyle

GXValueBinding o-- GXExpression

GXEventBinding o-- GXExpression

GXAnimation o-- GXExpression


GXTemplatePath <|-- GXTemplatePathAssets
GXTemplatePath <|-- GXTemplatePathAssetsBinary

GXExpression <|-- GXUndefined
GXExpression <|-- GXSelf
GXExpression <|-- GXEval
GXExpression <|-- GXEnv
GXExpression <|-- GXScroll
GXExpression <|-- GXSize
GXExpression <|-- GXJsonObj
GXExpression <|-- GXJsonArrayObj
GXExpression <|-- GXBool
GXExpression <|-- GXString
GXExpression <|-- GXFloat
GXExpression <|-- GXInt
GXExpression <|-- GXNull
GXExpression <|-- GXText
GXExpression <|-- GXValue
GXExpression <|-- GXValue
GXExpression <|-- GXTernaryValue1
GXExpression <|-- GXTernaryValue2
GXExpression <|-- GXTernaryValue3
GXExpression <|-- GXTernaryValue3
GXExpression <|-- GXTextValue


GXEngine ..> GXTemplateItem
GXEngine ..> GXTemplateData
GXEngine ..> GXMeasureSize
GXEngine ..> GXTemplateContext

GXEngine *--> GXProviderImpl
GXEngine *--> GXRenderImpl
GXEngine *--> GXDataImpl

GXRenderImpl ..> GXNodeTreeCreator

GXRenderImpl ..> GXViewTreeCreator

GXRenderImpl ..> GXViewNodeTreeUpdater

GXRenderImpl ..> GXViewTreeUpdater

GXIBindData <|.. GXView
GXIBindData <|.. GXViewText
GXIBindData <|.. GXViewImage
GXIBindData <|.. GXViewIconFont
GXIBindData <|.. GXViewScrollAndGrid
GXIBindData <|.. GXViewLottie

GXStretchNode *--> Node
GXStretchNode *--> Layout

GXTemplateNode *--> GXLayer
GXTemplateNode *--> GXCss
GXTemplateNode *--> GXDataBinding
GXTemplateNode *--> GXEventBinding
GXTemplateNode *--> GXAnimationBinding

GXNode o--> GXTemplateNode
GXNode o--> GXStretchNode

GXTemplateContext o--> GXNode
GXTemplateContext o--> GXTemplateInfo

@enduml
